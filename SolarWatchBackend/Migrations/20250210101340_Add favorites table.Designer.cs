// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SolarWatch.Data;

#nullable disable

namespace SolarWatch.Migrations
{
    [DbContext(typeof(SolarApiContext))]
    [Migration("20250210101340_Add favorites table")]
    partial class Addfavoritestable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IdentityUser");
                });

            modelBuilder.Entity("SolarWatch.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Latitude = 40.509999999999998,
                            Longitude = 2.1899999999999999,
                            Name = "Barcelona"
                        },
                        new
                        {
                            Id = 2,
                            Latitude = 48.850000000000001,
                            Longitude = 2.3500000000000001,
                            Name = "Paris"
                        },
                        new
                        {
                            Id = 3,
                            Latitude = 51.509999999999998,
                            Longitude = -0.13,
                            Name = "London"
                        },
                        new
                        {
                            Id = 4,
                            Latitude = 40.710000000000001,
                            Longitude = -74.010000000000005,
                            Name = "New York"
                        },
                        new
                        {
                            Id = 5,
                            Latitude = 34.049999999999997,
                            Longitude = -118.23999999999999,
                            Name = "Los Angeles"
                        },
                        new
                        {
                            Id = 6,
                            Latitude = 41.899999999999999,
                            Longitude = 12.49,
                            Name = "Rome"
                        },
                        new
                        {
                            Id = 7,
                            Latitude = 35.68,
                            Longitude = 139.69,
                            Name = "Tokyo"
                        },
                        new
                        {
                            Id = 8,
                            Latitude = 55.75,
                            Longitude = 37.619999999999997,
                            Name = "Moscow"
                        },
                        new
                        {
                            Id = 9,
                            Latitude = 52.520000000000003,
                            Longitude = 13.4,
                            Name = "Berlin"
                        },
                        new
                        {
                            Id = 10,
                            Latitude = 37.770000000000003,
                            Longitude = -122.42,
                            Name = "San Francisco"
                        },
                        new
                        {
                            Id = 11,
                            Latitude = 39.899999999999999,
                            Longitude = 116.40000000000001,
                            Name = "Beijing"
                        },
                        new
                        {
                            Id = 12,
                            Latitude = 19.43,
                            Longitude = -99.129999999999995,
                            Name = "Mexico City"
                        },
                        new
                        {
                            Id = 13,
                            Latitude = 28.609999999999999,
                            Longitude = 77.230000000000004,
                            Name = "New Delhi"
                        },
                        new
                        {
                            Id = 14,
                            Latitude = -33.869999999999997,
                            Longitude = 151.21000000000001,
                            Name = "Sydney"
                        },
                        new
                        {
                            Id = 15,
                            Latitude = 1.3500000000000001,
                            Longitude = 103.81999999999999,
                            Name = "Singapore"
                        },
                        new
                        {
                            Id = 16,
                            Latitude = 50.079999999999998,
                            Longitude = 14.43,
                            Name = "Prague"
                        },
                        new
                        {
                            Id = 17,
                            Latitude = 59.329999999999998,
                            Longitude = 18.059999999999999,
                            Name = "Stockholm"
                        },
                        new
                        {
                            Id = 18,
                            Latitude = 31.23,
                            Longitude = 121.47,
                            Name = "Shanghai"
                        },
                        new
                        {
                            Id = 19,
                            Latitude = -23.550000000000001,
                            Longitude = -46.630000000000003,
                            Name = "São Paulo"
                        },
                        new
                        {
                            Id = 20,
                            Latitude = 6.5199999999999996,
                            Longitude = 3.3700000000000001,
                            Name = "Lagos"
                        },
                        new
                        {
                            Id = 21,
                            Latitude = 43.649999999999999,
                            Longitude = -79.379999999999995,
                            Name = "Toronto"
                        },
                        new
                        {
                            Id = 22,
                            Latitude = 55.68,
                            Longitude = 12.57,
                            Name = "Copenhagen"
                        },
                        new
                        {
                            Id = 23,
                            Latitude = 25.280000000000001,
                            Longitude = 51.530000000000001,
                            Name = "Doha"
                        },
                        new
                        {
                            Id = 24,
                            Latitude = -26.199999999999999,
                            Longitude = 28.039999999999999,
                            Name = "Johannesburg"
                        },
                        new
                        {
                            Id = 25,
                            Latitude = 35.689999999999998,
                            Longitude = 51.420000000000002,
                            Name = "Tehran"
                        });
                });

            modelBuilder.Entity("SolarWatch.Favorite", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SolarId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "SolarId");

                    b.HasIndex("SolarId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("SolarWatch.Solar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Sunrise")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sunset")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Solars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            Date = new DateOnly(2024, 2, 7),
                            Sunrise = "06:30",
                            Sunset = "18:45"
                        },
                        new
                        {
                            Id = 2,
                            CityId = 2,
                            Date = new DateOnly(2024, 2, 7),
                            Sunrise = "07:15",
                            Sunset = "19:05"
                        },
                        new
                        {
                            Id = 3,
                            CityId = 3,
                            Date = new DateOnly(2024, 2, 7),
                            Sunrise = "07:45",
                            Sunset = "18:30"
                        },
                        new
                        {
                            Id = 4,
                            CityId = 4,
                            Date = new DateOnly(2024, 2, 7),
                            Sunrise = "06:50",
                            Sunset = "17:55"
                        },
                        new
                        {
                            Id = 5,
                            CityId = 5,
                            Date = new DateOnly(2024, 2, 7),
                            Sunrise = "06:55",
                            Sunset = "18:20"
                        },
                        new
                        {
                            Id = 6,
                            CityId = 6,
                            Date = new DateOnly(2024, 2, 7),
                            Sunrise = "07:10",
                            Sunset = "18:40"
                        },
                        new
                        {
                            Id = 7,
                            CityId = 7,
                            Date = new DateOnly(2024, 2, 7),
                            Sunrise = "06:20",
                            Sunset = "17:30"
                        },
                        new
                        {
                            Id = 8,
                            CityId = 8,
                            Date = new DateOnly(2024, 2, 7),
                            Sunrise = "08:15",
                            Sunset = "16:45"
                        },
                        new
                        {
                            Id = 9,
                            CityId = 9,
                            Date = new DateOnly(2024, 2, 7),
                            Sunrise = "07:50",
                            Sunset = "17:20"
                        },
                        new
                        {
                            Id = 10,
                            CityId = 10,
                            Date = new DateOnly(2024, 2, 7),
                            Sunrise = "06:40",
                            Sunset = "17:50"
                        });
                });

            modelBuilder.Entity("SolarWatch.Favorite", b =>
                {
                    b.HasOne("SolarWatch.Solar", "Solar")
                        .WithMany()
                        .HasForeignKey("SolarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Solar");
                });

            modelBuilder.Entity("SolarWatch.Solar", b =>
                {
                    b.HasOne("SolarWatch.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });
#pragma warning restore 612, 618
        }
    }
}
